import React, { useState } from 'react';
import { useRouter } from 'next/router';
import useSWR, { useSWRConfig } from 'swr';
import Image from 'next/image';
import { useDispatch } from 'react-redux';
import toast from 'react-hot-toast';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';

import productService from '../../services/product.service';
import reviewService from '../../services/review.service';
import { AppLayout } from '../../layouts/AppLayout';
import { addItemToCart } from '../../store/cartSlice';

const productFetcher = (url, id) => productService.getProductById(id);
const reviewsFetcher = (url) => reviewService.getReviews(url.split('/')[2]);

const reviewSchema = yup.object().shape({
  rating: yup.number().min(1, 'Rating is required').max(5).required(),
  comment: yup.string().required('Comment is required').min(10, 'Comment must be at least 10 characters'),
});

const StarRating = ({ rating, setRating }) => {
  return (
    <div className="flex items-center">
      {[...Array(5)].map((_, index) => {
        const starValue = index + 1;
        return (
          <button
            type="button"
            key={starValue}
            className={`text-3xl ${starValue <= rating ? 'text-yellow-400' : 'text-gray-300'}`}
            onClick={() => setRating && setRating(starValue)}
          >
            &#9733;
          </button>
        );
      })}
    </div>
  );
};

const ReviewCard = ({ review }) => (
  <div className="border-b border-gray-200 py-4">
    <div className="flex items-center mb-2">
      <p className="font-bold mr-4">{review.user?.firstName || 'Anonymous'}</p>
      <StarRating rating={review.rating} />
    </div>
    <p className="text-gray-600 mb-1">{review.comment}</p>
    <p className="text-xs text-gray-400">
      {new Date(review.createdAt).toLocaleDateString()}
    </p>
  </div>
);

const ProductDetailPage = () => {
  const router = useRouter();
  const { id: productId } = router.query;
  const dispatch = useDispatch();
  const { mutate } = useSWRConfig();

  const [rating, setRating] = useState(0);

  const { data: product, error: productError } = useSWR(
    productId ? [`/products/${productId}`, productId] : null,
    productFetcher
  );
  const { data: reviews, error: reviewsError } = useSWR(
    productId ? `/products/${productId}/reviews` : null,
    reviewsFetcher
  );

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: yupResolver(reviewSchema),
  });

  const handleAddToCart = () => {
    if (!product) return;
    dispatch(addItemToCart({ ...product, id: product._id }));
    toast.success(`${product.name} added to cart!`);
  };

  const onReviewSubmit = async (data) => {
    if (!productId) return;
    try {
      await reviewService.createReview(productId, { ...data, rating });
      toast.success('Review submitted successfully! It will appear after approval.');
      reset();
      setRating(0);
      mutate(`/products/${productId}/reviews`);
    } catch (error) {
      toast.error(error.message || 'Failed to submit review.');
    }
  };

  // Set rating value for validation
  React.useEffect(() => {
    setValue('rating', rating, { shouldValidate: true });
  }, [rating, setValue]);

  if (productError) return <AppLayout><div>Failed to load product details.</div></AppLayout>;
  if (!product) return <AppLayout><div>Loading...</div></AppLayout>;

  const imageUrl = product.images?.[0] || '/placeholder.png';

  return (
    <AppLayout>
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
          <div className="relative w-full h-96">
            <Image src={imageUrl} alt={product.name} layout="fill" objectFit="contain" className="rounded-lg" />
          </div>
          <div>
            <h1 className="text-4xl font-bold mb-4">{product.name}</h1>
            <p className="text-gray-600 mb-4">{product.description}</p>
            <p className="text-3xl font-bold mb-6">${product.price.toFixed(2)}</p>
            <button
              onClick={handleAddToCart}
              className="bg-black text-white font-bold py-2 px-6 rounded hover:bg-gray-800 transition-colors duration-300"
            >
              Add to Cart
            </button>
          </div>
        </div>

        {/* Reviews Section */}
        <div className="border-t border-gray-200 pt-8">
          <h2 className="text-2xl font-bold mb-6">Customer Reviews</h2>
          
          {/* Review Form */}
          <div className="mb-8 p-6 border border-gray-200 rounded-lg bg-gray-50">
            <h3 className="text-xl font-semibold mb-4">Write a Review</h3>
            <form onSubmit={handleSubmit(onReviewSubmit)}>
              <div className="mb-4">
                <label className="block font-medium mb-2">Your Rating</label>
                <StarRating rating={rating} setRating={(newRating) => setRating(newRating)} />
                <input type="hidden" {...register('rating')} />
                {errors.rating && <p className="text-red-500 text-sm mt-1">{errors.rating.message}</p>}
              </div>
              <div className="mb-4">
                <label htmlFor="comment" className="block font-medium mb-2">Your Review</label>
                <textarea
                  id="comment"
                  {...register('comment')}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-black focus:border-transparent"
                  rows="4"
                ></textarea>
                {errors.comment && <p className="text-red-500 text-sm mt-1">{errors.comment.message}</p>}
              </div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="bg-black text-white font-bold py-2 px-6 rounded hover:bg-gray-800 transition-colors duration-300 disabled:bg-gray-400"
              >
                {isSubmitting ? 'Submitting...' : 'Submit Review'}
              </button>
            </form>
          </div>

          {/* Existing Reviews */}
          <div>
            {reviewsError && <div>Failed to load reviews.</div>}
            {!reviews && !reviewsError && <div>Loading reviews...</div>}
            {reviews && reviews.length === 0 && <div>No reviews yet. Be the first to write one!</div>}
            {reviews && reviews.map((review) => <ReviewCard key={review.id} review={review} />)}
          </div>
        </div>
      </div>
    </AppLayout>
  );
};

export default ProductDetailPage;
